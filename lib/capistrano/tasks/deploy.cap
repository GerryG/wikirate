

# this overrides the default git:create_release in order to run submodules
#namespace :git do
#  desc "Copy repo to releases"
#  task create_release: :"git:update" do
#    on roles(:all) do
#      with fetch(:git_environmental_variables) do
#        within repo_path do
#          execute :git, :clone, "-b", fetch(:branch),
#                  "--recursive --depth 1 .", release_path
#        end
#      end
#    end
#  end
#end

namespace :deploy do
  before :starting, :backup do
    next unless fetch(:stage) == :production
    puts <<-EOF

************************** WARNING ***************************
            You are about to deploy to production
**************************************************************

    EOF
    ask :answer, 'Are you sure you want to update wikirate.org? Type "forgive me, Yoda"'
    exit unless fetch(:answer) == "forgive me, Yoda"
    # invoke "backup:create"
  end

  after :updated, :migrate do
    #because this creates the log and tmp files, it needs to be executed before the chown,
    # which in turn needs to happen before the restart.  not ideal.
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      within release_path do
        # execute :mkdir, "tmp"
        execute :mkdir, "log"
        execute :rake, "decko:migrate"
      end
    end
  end

  desc "Set www-data permissions on config.ru / log"
  after :updated, :deploy_chown do
    on roles(:app) do
      execute :sudo, "/opt/bin/deploy_chown", release_path
    end
  end

  desc "clear cache"
  after :published, :clear_cache do
    on roles(:app) do
      within release_path do
        execute :rake, "decko:reset_cache"
      end
    end
  end

  # TODO: obviate this
  # Thanks to capistrano-passenger (presumably), the deployment is calling `passenger-config restart-app`,
  # which is supposed to make this old-school restart unnecessary.  However, that command has a permissions error:
  #
  #   *** ERROR: You are not authorized to query the status for this Phusion Passenger instance.
  #   Please try again with 'rvmsudo'.
  #
  # If/when we get around to fixing that, we can get rid of this restart task call.
  after :published, :restart
  desc "Restart application"
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      execute :touch, release_path.join("tmp/restart.txt")
    end
  end

  after :finishing, :cleanup

  after :finishing, :deploy_pt_stories do
    pt_config_file = File.expand_path("../../../config/pivotaltracker.yml", __FILE__)
    next if fetch(:stage) != :staging || !File.exists?(pt_config_file)

    require 'pivotal-tracker'
    tracker = YAML.load pt_config_file
    %i[token project_id].each do |n|
      raise "#{n} not set in pivotaltracker.yml"
    end

    PivotalTracker::Client.token = tracker[:token]
    PivotalTracker::Client.use_ssl = true

    unpakt_project = PivotalTracker::Project.find(tracker[:project_id])
    stories = unpakt_project.stories.all(:state => "finished", :story_type => ['bug', 'feature'])

    staging_deploy_tag = `git tag | grep staging | tail -n1`

    stories.each do | story |
      puts "Searching for #{story.id} in local git repo."
      search_result = `git log --grep #{story.id} #{staging_deploy_tag}`
      if search_result.length > 0
        puts "Found #{story.id}, marking as delivered."
        story.notes.create(:text => "Delivered by staging deploy script.")
        story.update({"current_state" => "delivered"})
      else
        puts "Coult not find #{story.id} in git repo."
      end
    end
  end

end
